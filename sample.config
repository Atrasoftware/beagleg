# -*- conf -*-
# Some annotated BeagleG sample configuration file.
# Adapt to your own needs.
# You can configure logical axes X, Y, Z, E, A, B, C, U, V, W
# Pass to machine-control with -c <config-file> option.
##

[ General ]
# Homing order. For 3D printers, you'd probably home Z last, while CNC machines
# typically home Z first.
home-order        = XYZ
require-homing    = yes  # Require homing (G28) is executed before first move.
range-check       = yes  # Check that axes are within range. Dangerous if no.
auto-motor-disable-seconds = 120  # Switch off motors after 2min of inactivity.

# -- Logical axis configuration

[ X-Axis ]
# The step motor has 200 full steps per turn. We do 32x microstepping
# One turn of a gear moves the toothed belt 60mm. The configuration understands
# a simple division expression:
steps-per-mm     = 32 * 200 / 60
max-feedrate     = 400   # mm/s
max-acceleration = 800  # mm/s^2
range            = 300   # mm - the travel of this axis
home-pos         = min   # This is where the home switch is. At min position.

[ Y-Axis ]
# Another example: each turn moves the ACME screw 1/4 inch on 8x microstepping
steps-per-mm     = 8*200 / (1/4 * 25.4)
max-feedrate     = 400  # mm/s
max-acceleration = 800  # mm/s^2
range            = 300  # mm
home-pos         = min

[ Z-Axis ]
# Our Z-axis; here, our screw only moves 2mm per turn.
steps-per-mm     = 32*200 / 2
max-feedrate     =   4  # mm/s  - our Z-axis is not very fast.
max-acceleration =  30  # mm/s^2
range            = 120  # mm
home-pos         = min  # For CNC machines, that typically would be max on Z

[ A-Axis ]
# The A-Axis is a rotational axis, so instead of steps-per-mm, we give
# steps per degree. 200 full steps, 32x microstepping per 360 degrees.
steps-per-degree = 32*200 / 360
max-feedrate     = 720  # degree/s
max-acceleration = 1000 # degree/s^2

[ E-Axis ]
# 3D printers have an 'E'-xtrusion axis.
steps-per-mm     = 32*200 / 30
max-feedrate     = 15
max-acceleration = 100

# Hardware mapping; which axes and switches are connected to which logical units.

[ Motor-Mapping ]
# If you don't happen to have a motor-mapping section, motors are assigned
# for the configured axis above in sequence XYZEABCUVW
motor_1 = axis:x   # X axis connected to motor 1
# We double up the y axis by connecting it to two motor driver, 2 and 3.
# One of it shall be mirrored.
motor_2 = axis:y
motor_3 = axis:-y  # negative, because we mirror this motor.
motor_4 = axis:z
motor_5 = axis:e
motor_6 = axis:a

[ Switch-Mapping ]
# These switches trigger on high: when activated, they generate a pos level.
switch_1 = active:high min_x
switch_2 = active:high min_y
switch_3 = active:high min_z

# You can have multiple switches wired together in case you only have a limited
# number of inputs or want to simplify wiring (put them electrically in series
# or parallel to get a logical 'or' to reach the switching level if either
# of these trigger). It is probably a good idea to have home-switches independent
# of each other, while lumping together all the limit switches (only used for
# exceptions anyway) can simplify wiring.
#switch_4 = active:high max_y max_y

# An example of a switch that triggers on low.
#switch_5 = active:low max_z
